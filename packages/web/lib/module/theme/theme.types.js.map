{"version":3,"sources":["theme.types.ts"],"names":["ThemeProps"],"mappings":"AAGA,SAASA,UAAT,QAA2B,mBAA3B,C,CAEA;;AAEA;AACA;AACA","sourcesContent":["import { ThemedStyledProps } from 'styled-components'\n\nimport { colors, fonts, fontSizes, fontWeights, lineHeights, paddings, units } from './theme.values'\nexport { ThemeProps } from 'styled-components'\n\n// definitions of theme types\n\n/**\n * the name of the colors of theme\n */\nexport type ThemeColorsName = 'primary' | 'secondary' | 'black' | 'white' | 'gray' | 'red' | 'transparent' | 'yellow'\n\n/**\n * Existing tones for each color (ThemeColorsName). Each one color must have the\n * tone \"base\" and optionally the \"light\", \"lighter\", \"dark\" and \"darker\" tones\n */\nexport interface ThemeColorsShade {\n  base: string\n  light?: string\n  lighter?: string\n  dark?: string\n  darker?: string\n}\n\n/**\n * The group of the colors (ThemeColorsName) and shades (ThemeColorsShade)\n *\n * @example\n * Each one color in ThemeColorsName becomes a key of an object, this object must have\n * the shades of ThemeColorsShade\n * ```json\n * {\n *   primary: {\n *     base: '#fff',\n *     light: '#fff',\n *     lighter: '#fff',\n *   }\n * }\n * ```\n */\nexport type ThemeColorsGroup = { [color in ThemeColorsName]: ThemeColorsShade }\n\n/**\n * Final type of theme colors, bases on colors defined before.\n * that is: Union of ThemeColorsName and ThemeColorsShades with their values defined\n */\nexport type ThemeColors = typeof colors\n\n/**\n * Type created based on values of font families defined on theme creation.\n * That is: If a family needs to be adde or removed a family, the type are\n * updated automatically\n */\nexport type ThemeFonts = { [fontName in keyof typeof fonts]: string }\n/**\n * Type created based on font sizes also defined when creating the theme\n * @example\n * Sizes defined as follows:\n * ```json\n * {\n *   sm: '0px' as '0px',\n *   md: '0px' as '0px',\n *   ...\n * }\n * ```\n */\nexport type ThemeFontSizes = { [fontSize in keyof typeof fontSizes]: number }\n\n/**\n * Type of font weights, based on values defined also in the theme creation\n * @example\n * Weights defined as follows:\n * ```json\n * {\n *   regular: 500 as 500,,\n *   bold: 900 as 900,\n *   ...\n * }\n * ```\n */\nexport type ThemeFontWeights = { [fontSize in keyof typeof fontWeights]: number }\n\n/**\n * Type of the line heights, based on their values defined\n */\nexport type ThemeLineHeights = { [fontSize in keyof typeof lineHeights]: number }\n\n/**\n * Type created based on measure units values defineds on theme creation\n * @example\n * Any units as example:\n * - base unit of spacing: 8\n * - header height (mobile): 60\n */\nexport type ThemeUnits = { [fontSize in keyof typeof units]: number }\n\n/**\n * Type of pre-definitions of paddings (using base unit). Pre-definition also created\n * in initial theme values.\n * @example\n * The padding values are defined using the base unit, that is:\n * ```json\n * {\n *   sm: units.base as 8,\n *   md: (units.base * 2) as 16,\n *   lg: (units.base * 3) as 24,\n *   ...\n * }\n * ```\n */\nexport type ThemePaddings = { [fontSize in keyof typeof paddings]: number }\n\n/**\n * The final interface of the theme.\n * The union of all types/interfaces created before.\n */\nexport interface Theme {\n  colors: ThemeColors\n\n  fonts: ThemeFonts\n  fontSizes: ThemeFontSizes\n  fontWeights: ThemeFontWeights\n  lineHeights: ThemeLineHeights\n\n  units: ThemeUnits\n  paddings: ThemePaddings\n}\n\n/**\n * Inject the theme props into a styled component.\n */\nexport type ThemedProps<P> = ThemedStyledProps<P, Theme>\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n"]}