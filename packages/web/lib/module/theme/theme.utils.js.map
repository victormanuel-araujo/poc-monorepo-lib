{"version":3,"sources":["theme.utils.ts"],"names":["get","defaultsDeep","css","theme","_theme","createTheme","getThemeColor","colorName","colorShade","alpha","color","base","shade","length","getFontWeight","weight","family","fontWeights","getFontSize","size","rawValue","getFontFamily","fontFamily","getPadding","multiply","paddings"],"mappings":"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","sourcesContent":["// utils functions to handle theme\nimport { get, defaultsDeep } from 'lodash'\nimport { css } from 'styled-components'\n\nimport { theme as _theme } from './theme'\nimport {\n  Theme,\n  ThemeColorsName,\n  ThemeColorsShade,\n  ThemeFontWeights,\n  ThemeFontSizes,\n  ThemePaddings,\n  ThemeProps,\n  ThemeFonts,\n} from './theme.types'\n\n/**\n * This function create an theme object.\n * Optionally, you can pass an custom theme object with custom values and it will\n * always be merged with the default theme (smash)\n *\n * @param theme - custom theme\n *\n * @example\n * ```ts\n * const theme_a = { a: 1, b: 2, c: 3 };\n * const theme_b = { a: 2 };\n *\n * const theme_c = createTheme(theme_a, theme_b);\n *\n * // the output (theme_c) is equal to:\n * // theme_c = { a: 2, b: 2, c: 3 };\n * ```\n */\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return defaultsDeep(theme, _theme)\n}\n\n/**\n * easy way to get an theme color with a shade and optionally an alpha channel\n *\n * @param colorName - the name of the color\n * @param colorShade - the shade of the color\n * @param alpha - an alpha value in hexadecimal pattern, that is: two character from '00' to 'FF'\n *\n * @example\n * ```ts\n * inside a styled-component\n * ${getThemeColor(...props)}\n *\n * outside a styled-component\n * getThemeColor(...props)({ theme })\n * ```\n */\nexport const getThemeColor = (\n  colorName: ThemeColorsName,\n  colorShade: keyof ThemeColorsShade = 'base',\n  alpha?: string\n) => ({ theme }): string => {\n  const color = get(theme, ['colors', colorName], { base: '#000000' })\n  const shade: string = get(color, [colorShade], color.base)\n\n  return alpha && alpha.length === 2 ? `${shade}${alpha}` : shade\n}\n\n/**\n * Get the style of a font weight.\n * Verify the platform where the component is used, and return te correct style\n * to apply the font weight\n *\n * @param weight - Font weight, ie light, regular, bold, etc.\n * @param family - Font family - only used on Android\n *\n * @example\n * ```ts\n * const Bold = styled.Text`\n *   ${getFontWeight('bold')}\n * `\n * ```\n */\nexport const getFontWeight = (weight: keyof ThemeFontWeights, family: keyof ThemeFonts = 'default') => ({ theme }) => {\n  /*\n   * In another platforms, as IOS or Web, is not necessary to set a new font family\n   * so,\n   */\n  return css`\n    font-weight: ${theme.fontWeights[weight]};\n  `\n}\n\n/**\n * Get the correct style for a font size.\n * return a style, with the font size and the relative line-height.\n *\n * @param size - Font size name, ie sm, md, lg, etc.\n * @param rawValue - If it's true, returns the raw integer value\n *                   instead of a style.\n *\n * @example\n * ```ts\n * const Title = styled.Text`\n *   ${getFontSize('lg')};\n * `\n * ```\n *\n * @example - `theme` comes from styled-component's ThemeContext.\n * ```tsx\n *   return <Icon size={getFontSize('lg', true)({ theme })} />\n * ```\n */\nexport const getFontSize = (size: keyof ThemeFontSizes, rawValue = false) => ({ theme }: ThemeProps<Theme>) => {\n  if (rawValue) {\n    return get(theme, ['fontSizes', size])\n  }\n\n  return css`\n    font-size: ${get(theme, ['fontSizes', size])}px;\n    line-height: ${get(theme, ['lineHeights', size])}px;\n  `\n}\n\n/**\n * Used to get a style of a font family and verify the platform where the\n * component is used, and return te correct style\n * to apply the font family\n *\n * @param family - the name of the family\n * @param weight - optionally an weight of the family. use it only in android\n *\n * *\n * @example\n * ```ts\n * const TitleFamily = styled.Text`\n *   ${getFontFamily('title')}\n * `\n * ```\n */\nexport const getFontFamily = (family: keyof ThemeFonts = 'default', weight: keyof ThemeFontWeights = 'medium') => ({\n  theme,\n}: ThemeProps<Theme>) => {\n  /* get the font family based on \"family\" prop  */\n  const fontFamily: string = get(theme, ['fonts', family])\n\n  return css`\n    font-family: ${fontFamily}-${weight};\n  `\n}\n\n/**\n * Get a named padding from current theme.\n *\n * @param size - Padding size name, ie sm, md, lg, etc.\n * @param multiply - used if is necessary to multiply the padding value\n *\n * @example\n * ```ts\n * const Container = styled.View`\n *   padding: ${getPadding('md')} ${getPadding('lg')};\n * `\n * ```\n */\nexport const getPadding = (size: keyof ThemePaddings, multiply = 1) => ({ theme }: ThemeProps<Theme>): string => {\n  return theme.paddings[size] * multiply + 'px'\n}\n"]}